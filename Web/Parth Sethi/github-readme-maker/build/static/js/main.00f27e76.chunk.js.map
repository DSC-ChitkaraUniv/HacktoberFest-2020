{"version":3,"sources":["App.js","Footer.js","serviceWorker.js","index.js"],"names":["App","state","inputText","updateTextArea","textarea","focus","autosize","updateOutput","handleChange","height","document","getElementById","clientHeight","style","addProfile","fetch","then","response","text","value","sampleOne","sampleTwo","downloadReadMeFile","element","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","ele","setState","this","__html","marked","sanitize","className","onClick","id","onChange","placeholder","ref","c","dangerouslySetInnerHTML","getMarkdownText","React","Component","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.00f27e76.chunk.js","sourcesContent":["import React from \"react\";\nimport marked from \"marked\";\nimport autosize from \"autosize\";\nclass App extends React.Component {\n  state = {\n    inputText: \"\",\n  };\n  updateTextArea = () => {\n    this.textarea.focus();\n    autosize(this.textarea);\n  };\n  updateOutput = () => {\n    this.handleChange();\n    const height = document.getElementById(\"output\").clientHeight;\n    document.getElementById(\"input\").style.height = `${height}px`;\n  };\n  addProfile = () => {\n    fetch(\"profile1.txt\")\n      .then((response) => response.text())\n      .then((text) => {\n        document.getElementById(\"input\").value = text;\n        this.updateOutput();\n      });\n  };\n  sampleOne = () => {\n    fetch(\"sample1.txt\")\n      .then((response) => response.text())\n      .then((text) => {\n        document.getElementById(\"input\").value = text;\n        this.updateOutput();\n      });\n  };\n  sampleTwo = () => {\n    fetch(\"sample2.txt\")\n      .then((response) => response.text())\n      .then((text) => {\n        document.getElementById(\"input\").value = text;\n        this.updateOutput();\n      });\n  };\n  downloadReadMeFile = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([this.state.inputText], {\n      type: \"text/plain\",\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"README.md\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  };\n  componentDidMount() {\n    this.updateTextArea();\n  }\n  handleChange = () => {\n    const ele = document.getElementById(\"input\");\n    this.setState({\n      inputText: ele.value,\n    });\n  };\n  getMarkdownText() {\n    var rawMarkup = marked(this.state.inputText, { sanitize: true });\n    return { __html: rawMarkup };\n  }\n  render() {\n    const { inputText } = this.state;\n    return (\n      <div className=\"App\">\n        <header>\n          <nav className=\"nav-wrapper transparent\">\n            <div className=\"container\">\n              <a href=\"https://github.com/victorakaps/github-readme-maker\" className=\"brand-logo\">\n                <h4>Github Readme Maker</h4>\n              </a>\n              <ul className=\"right hide-on-med-and-down\">\n                <li>\n                  <button className=\"btn-color\" onClick={this.sampleOne}>\n                    TEMPLATE-1\n                  </button>\n                </li>\n                <li>\n                  <button className=\"btn-color\" onClick={this.sampleTwo}>\n                    TEMPLATE-2\n                  </button>\n                </li>\n                <li>\n                  <button className=\"btn-color\" onClick={this.addProfile}>\n                    PROFILE-1\n                  </button>\n                </li>\n              </ul>\n            </div>\n          </nav>\n        </header>\n        <div className=\"main\">\n          <div className=\"row\">\n            <div className=\"col s12 l6\">\n              <textarea\n                id=\"input\"\n                value={inputText}\n                onChange={this.handleChange}\n                placeholder=\"Write MarkDown Here...\"\n                ref={(c) => (this.textarea = c)}\n              />\n            </div>\n            <div className=\"col s12 l6\" id=\"output\">\n              <p dangerouslySetInnerHTML={this.getMarkdownText()}></p>\n            </div>\n          </div>\n        </div>\n        <center>\n          <button\n            className=\"btn-color btn-main center\"\n            onClick={this.downloadReadMeFile}\n          >\n            Download README.MD\n          </button>\n        </center>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <footer className=\"page-footer grey darken-3\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col s12 l6\">\r\n            <h5>About Github Readme Maker</h5>\r\n            <p>\r\n              Github Readme Maker provides very handy formatting buttons and\r\n              shortcuts, based on the WYSIWYG-style Markdown editor used by\r\n              Stack Overflow.\r\n            </p>\r\n          </div>\r\n          <div className=\"col s12 l4 offset-l2\">\r\n            <h5>Features</h5>\r\n            <ul>\r\n              <li>\r\n                <p className=\"grey-text text-lighten-3\">Inbuilt Templates</p>\r\n              </li>\r\n              <li>\r\n                <p className=\"grey-text text-lighten-3\">\r\n                  GitHub Flavored Markdown\r\n                </p>\r\n              </li>\r\n              <li>\r\n                <p className=\"grey-text text-lighten-3\">\r\n                  Live preview with Scroll Sync\r\n                </p>\r\n              </li>\r\n              <li>\r\n                <p className=\"grey-text text-lighten-3\">Emojis Support</p>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"footer-copyright grey darken-4\">\r\n        <div className=\"container center-align\">&copy; 2020 <a href=\"https://github.com/victorakaps\">Victorakaps</a></div>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Footer from \"./Footer\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <Footer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}